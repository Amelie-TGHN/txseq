# either transcript, exon-by-transcript, or gene ranges
getRanges <- function(txdb=txdb, txomeInfo=txomeInfo, type=c("txp","exon","cds","gene")) {
long <- c(txp="transcript",exon="exon",cds="CDS",gene="gene")
stopifnot(length(txomeInfo$gtf) == 1)
stopifnot(txomeInfo$gtf != "")
# TODO the entry in the BiocFileCache assumes that the GTF/GFF file
# has a distinctive naming structure... works for GENCODE/Ensembl/RefSeq
rngsName <- paste0(type,"Rngs-",basename(txomeInfo$gtf))
bfcloc <- getBFCLoc()
bfc <- BiocFileCache(bfcloc)
q <- bfcquery(bfc, rngsName)
if (bfccount(q) == 0) {
# now generate ranges
message(paste("generating",long[type],"ranges"))
# TODO what to do about warnings about out-of-bound ranges? pass along somewhere?
if (type == "txp") {
################
## txp ranges ##
################
if (txomeInfo$source == "Ensembl") {
suppressWarnings({
rngs <- transcripts(txdb)
})
} else {
suppressWarnings({
rngs <- transcripts(txdb, columns=c("tx_id","gene_id","tx_name"))
})
}
names(rngs) <- rngs$tx_name
# dammit de novo transcript annotation will have
# the transcript names as seqnames (seqid in the GFF3)
if (tolower(txomeInfo$source) == "dammit") {
names(rngs) <- seqnames(rngs)
}
} else if (type == "exon") {
#################
## exon ranges ##
#################
# TODO suppress warnings about out-of-bound ranges for now... how to pass this on
suppressWarnings({
rngs <- exonsBy(txdb, by="tx", use.names=TRUE)
})
} else if (type == "cds") {
#################
## CDS ranges ##
#################
# TODO suppress warnings about out-of-bound ranges for now... how to pass this on
suppressWarnings({
rngs <- cdsBy(txdb, by="tx", use.names=TRUE)
})
} else if (type == "gene") {
#################
## gene ranges ##
#################
# TODO suppress warnings about out-of-bound ranges for now... how to pass this on
suppressWarnings({
rngs <- genes(txdb)
})
}
savepath <- bfcnew(bfc, rngsName, ext=".rds")
saveRDS(rngs, file=savepath)
} else {
loadpath <- bfcrpath(bfc, rngsName)
message(paste("loading existing",long[type],"ranges created:",q$create_time[1]))
rngs <- readRDS(loadpath)
}
rngs
}
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
#' makeLinkedTxome(indexDir=indexDir, source="Ensembl", organism="Drosophila melanogaster",
#'                 release="98", genome="BDGP6.22", fasta=fastaFTP, gtf=gtfPath, write=FALSE)
#'
#' # to clear the entire linkedTxome table
#' # (don't run unless you want to clear this table!)
#' # bfcloc <- getTximetaBFC()
#' # bfc <- BiocFileCache(bfcloc)
#' # bfcremove(bfc, bfcquery(bfc, "linkedTxomeTbl")$rid)
#'
#' @export
makeLinkedTxome <- function(indexDir, source, organism, release,
genome, fasta, gtf, write=TRUE, jsonFile) {
indexJson <- file.path(indexDir, "info.json")
if (!file.exists(indexJson)) {
indexJson <- file.path(indexDir, "header.json")
}
indexList <- fromJSON(indexJson)
# Salmon's SHA-256 hash of the index is called "SeqHash" in the index JSON
# Pre-Salmon 1.0.0 the header.json file has a "value0" sublist,
# from Salmon 1.0.0 the info.json file doesn't
if ("value0" %in% names(indexList)) {
indexSeqHash <- indexList$value0$SeqHash
} else {
indexSeqHash <- indexList$SeqHash
}
# here and in the data frame where we record linkedTxome's,
# 'index' is just the basename of the Salmon index
index <- basename(indexDir)
# standardize capitalization
std.sources <- c("GENCODE","Ensembl")
for (src in std.sources) {
if (tolower(source) == tolower(src)) {
source <- src
}
}
if (source %in% std.sources) {
if (source == "Ensembl") {
message("NOTE: linkedTxome with source='Ensembl', ensembldb will be used to parse GTF.
this may produce errors if the GTF is not from Ensembl, or has been modified.
set useHub=FALSE in tximeta to avoid download of reference txome from AnnotationHub.
alternatively use a different string for source argument")
} else {
message("NOTE: linkedTxome with source='GENCODE', set useHub=FALSE in tximeta
to avoid download of reference txome from AnnotationHub.
alternatively use a different string for source argument")
}
}
# a single-row tibble for the linkedTxomeTbl
lt <- tibble(index=index,
source=source,
organism=organism,
release=release,
genome=genome,
fasta=list(fasta),
gtf=gtf,
sha256=indexSeqHash)
stopifnot(nrow(lt) == 1)
if (write) {
if (missing(jsonFile)) {
jsonFile <- paste0(indexDir,".json")
}
message(paste("writing linkedTxome to", jsonFile))
# TODO be more careful about writing to a file (ask)
write(toJSON(lt, pretty=TRUE), file=jsonFile)
}
stashLinkedTxome(lt)
}
#' @name linkedTxome
#' @rdname linkedTxome
#'
#' @export
loadLinkedTxome <- function(jsonFile) {
stashLinkedTxome(do.call(tibble, fromJSON(jsonFile)))
}
# given a single-row tibble 'lt', save this into the linkedTxomeTbl
# (the linkedTxome tibble lives in the tximeta BiocFileCache)
stashLinkedTxome <- function(lt) {
stopifnot(is(lt, "tbl"))
bfcloc <- getBFCLoc()
bfc <- BiocFileCache(bfcloc)
q <- bfcquery(bfc, "linkedTxomeTbl")
if (bfccount(q) == 0) {
message("saving linkedTxome in bfc (first time)")
savepath <- bfcnew(bfc, "linkedTxomeTbl", ext=".rds")
linkedTxomeTbl <- lt
saveRDS(linkedTxomeTbl, file=savepath)
} else {
loadpath <- bfcrpath(bfc, "linkedTxomeTbl")
linkedTxomeTbl <- readRDS(loadpath)
if (lt$index %in% linkedTxomeTbl$index) {
m <- match(lt$index, linkedTxomeTbl$index)
stopifnot(length(m) == 1)
if (all(mapply(identical, lt, linkedTxomeTbl[m,]))) {
message("linkedTxome is same as already in bfc")
} else {
message("linkedTxome was different than one in bfc, replacing")
linkedTxomeTbl[m,] <- lt
}
} else {
message("saving linkedTxome in bfc")
linkedTxomeTbl <- rbind(linkedTxomeTbl, lt)
}
saveRDS(linkedTxomeTbl, file=loadpath)
}
invisible()
}
library(jsonlite)
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
library(tximport)
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
#' @examples
#'
#' # getting the BiocFileCache used by tximeta
#' # (may not be set, which uses BiocFileCache default or temp directory)
#' getTximetaBFC()
#'
#' # don't want to actually change user settings so this is not run:
#' # setTximetaBFC()
#'
#' @export
getTximetaBFC <- function() {
bfclocFile <- bfclocFile()
if (!file.exists(bfclocFile)) {
message("tximeta's BiocFileCache location has not yet been set")
NULL
} else {
readBFCLocFile(bfclocFile)
}
}
#' @rdname getTximetaBFC
#'
#' @export
setTximetaBFC <- function(dir, quiet=FALSE) {
if (missing(dir)) {
message("which BiocFileCache directory should tximeta use? (press Enter to cancel)")
bfcloc <- file.choose()
} else {
stopifnot(is(dir, "character"))
bfcloc <- dir
}
bfclocFile <- bfclocFile()
writeBFCLocFile(bfcloc)
if (!quiet) message("for group use, set the permissions of this directory to allow group write (g+w)")
invisible()
}
# functions to read or edit the BiocFileCache location for tximeta (bfcloc)
# this information is stored in the 'tximeta' default R_user_dir
# under a file 'bfcloc.json'
bfclocFile <- function() {
tximetaDir <- R_user_dir("tximeta", which="config")
file.path(tximetaDir, "bfcloc.json")
}
writeBFCLocFile <- function(bfcloc) {
tximetaDir <- R_user_dir("tximeta", which="config")
if (!file.exists(tximetaDir)) dir.create(tximetaDir, recursive=TRUE)
bfclocFile <- bfclocFile()
write(toJSON(bfcloc, pretty=TRUE), file=bfclocFile)
}
readBFCLocFile <- function(bfclocFile) {
fromJSON(bfclocFile)
}
# an internal function for getting the BFC location
# the logic here depends on whether a location has been set before,
# and whether tximport is being run interactively or not
getBFCLoc <- function() {
defaultDir <- R_user_dir("BiocFileCache", which="cache")
prompt <- paste("",
"tximeta needs a BiocFileCache directory to access and save TxDb objects.",
paste0("Do you wish to use the default directory: '",defaultDir,"'?"),
"If not, a temporary directory that is specific to this R session will be used.","",
"You can always change this directory later by running: setTximetaBFC()",
"Or enter [0] to exit and set this directory manually now.",
"This location can also be set by environmental variable TXIMETA_HUB_CACHE.",
sep="\n")
# this is the JSON file where we store the location of the tximeta BiocFileCache
bfclocFile <- bfclocFile()
# this file tells us which BFC dir has been previously chosen use with tximeta
if (!file.exists(bfclocFile)) {
if (interactive()) {
# exception: temp dir already specified as BFC location in this session
if (file.exists(file.path(tempdir(),"BiocFileCache.sqlite"))) {
bfcloc <- tempdir()
return(bfcloc)
}
# otherwise ask user:
ans <- menu(c("Yes (use default)", "No (use temp)"), title=prompt)
if (ans == 0) stop("no BiocFileCache directory choice made at this time")
# user wants to use default dir:
if (ans == 1) {
bfcloc <- defaultDir
writeBFCLocFile(bfcloc)
# user wants to use temp dir:
} else if (ans == 2) {
bfcloc <- tempdir()
}
# not interactive, use temp dir:
} else {
bfcloc <- tempdir()
}
# file already exists, read BFC loc:
} else {
bfcloc <- readBFCLocFile(bfclocFile)
}
bfcloc
}
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
library(tools)
library(methods)
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
library(AnnotationHub)
library(BiocFileCache)
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
txim2 <- function (coldata, type = NULL, txOut = TRUE, skipMeta = FALSE,
skipSeqinfo = FALSE, useHub = TRUE, markDuplicateTxps = FALSE,
cleanDuplicateTxps = FALSE, customMetaInfo = NULL, ...)
{
if (is(coldata, "vector")) {
coldata <- data.frame(files = coldata, names = seq_along(coldata))
}
stopifnot(all(c("files", "names") %in% names(coldata)))
files <- as.character(coldata$files)
names(files) <- coldata$names
if (!all(file.exists(files))) {
stop("the files do not exist at the location specified by 'coldata$files'")
}
if (is.null(type)) {
if (grepl(".quant$", coldata$files[1])) {
type <- "piscem"
}
else {
type <- "salmon"
}
}
if (type == "alevin") {
if (length(files) > 1)
stop("alevin import currently only supports a single experiment")
}
coldata <- subset(coldata, select = -files)
tximetaInfo <- list(version = packageVersion("tximeta"),
type = type, importTime = Sys.time())
metadata <- list(tximetaInfo = tximetaInfo)
skipMetaLogic <- skipMeta | (!type %in% c("salmon", "sailfish",
"alevin", "piscem") & is.null(customMetaInfo))
if (skipMetaLogic) {
txi <- tximport(files, type = type, txOut = txOut, ...)
metadata$countsFromAbundance <- txi$countsFromAbundance
if (type == "alevin") {
coldata <- data.frame(row.names = colnames(txi[["counts"]]))
}
se <- makeUnrangedSE(txi, coldata, metadata)
return(se)
}
else {
if (!txOut)
stop("tximeta is designed to have transcript-level output for Salmon and piscem.\n  set txOut=TRUE and use summarizeToGene for gene-level summarization")
}
if (type == "alevin") {
metaInfo <- list(getMetaInfo(dirname(files), type = "salmon",
customMetaInfo = customMetaInfo))
}
else {
metaInfo <- lapply(files, getMetaInfo, type = type, customMetaInfo = customMetaInfo)
}
if (type != "piscem") {
indexSeqHash <- metaInfo[[1]]$index_seq_hash
}
else if (type == "piscem") {
indexSeqHash <- metaInfo[[1]]$signatures$sha256_seqs
}
if (length(files) > 1) {
if (type != "piscem") {
hashes <- sapply(metaInfo, function(x) x$index_seq_hash)
}
else if (type == "piscem") {
hashes <- sapply(metaInfo, function(x) x$signatures$sha256_seqs)
}
if (!all(hashes == indexSeqHash)) {
stop("the samples do not share the same index, and cannot be imported")
}
if ("num_bootstraps" %in% names(metaInfo[[1]])) {
nboot <- sapply(metaInfo, function(x) x$num_bootstraps)
if (!all(nboot == nboot[1])) {
message("\nNOTE: inferential replicate number not equal across files,\nmay lead to errors in object construction, unless 'dropInfReps=TRUE'")
if (any(nboot == 0)) {
message(paste("\nNOTE: the following files (by #) have 0 inferential replicates:\n  ",
paste(which(nboot == 0), collapse = ",")),
"\n")
}
}
}
}
metaInfo <- reshapeMetaInfo(metaInfo)
metadata$quantInfo <- metaInfo
message("importing quantifications")
txi <- tximport(files, type = type, txOut = TRUE, ...)
metadata$countsFromAbundance <- txi$countsFromAbundance
txomeInfo <- getTxomeInfo(indexSeqHash)
if (is.null(txomeInfo)) {
message("couldn't find matching transcriptome, returning non-ranged SummarizedExperiment")
if (type == "alevin") {
coldata <- data.frame(row.names = colnames(txi[["counts"]]))
}
se <- makeUnrangedSE(txi, coldata, metadata)
return(se)
}
print(txomeInfo)
txdb <- getTxDb(txomeInfo, useHub = useHub)
if (type != "alevin") {
txps <- getRanges(txdb = txdb, txomeInfo = txomeInfo,
type = "txp")
metadata$level <- "txp"
}
else if (type == "alevin") {
message("generating gene ranges")
txps <- getRanges(txdb = txdb, txomeInfo = txomeInfo,
type = "gene")
metadata$level <- "gene"
}
if (type == "alevin") {
if ("variance" %in% names(txi)) {
if ("infReps" %in% names(txi)) {
assays <- c(txi[c("counts", "variance")], txi$infReps)
names(assays) <- c("counts", "variance", paste0("infRep",
seq_along(txi$infReps)))
}
else {
assays <- txi[c("counts", "variance")]
}
}
else {
assays <- txi["counts"]
}
if ("mean" %in% names(txi)) {
assays <- c(assays, txi["mean"])
}
if ("tier" %in% names(txi)) {
assays <- c(assays, txi["tier"])
}
coldata <- data.frame(row.names = colnames(assays[["counts"]]))
}
else {
txi.nms <- c("counts", c(setdiff(names(txi), c("counts",
"countsFromAbundance", "infReps"))))
assays <- txi[txi.nms]
if ("infReps" %in% names(txi)) {
infReps <- rearrangeInfReps(txi$infReps)
infReps <- lapply(infReps, function(mat) {
rownames(mat) <- rownames(assays[["counts"]])
colnames(mat) <- colnames(assays[["counts"]])
mat
})
assays <- c(assays, infReps)
}
}
if (txomeInfo$source %in% c("Ensembl", "LocalEnsembl")) {
txId <- sub("\\..*", "", rownames(assays[["counts"]]))
for (nm in names(assays)) {
rownames(assays[[nm]]) <- txId
}
}
assay.nms <- rownames(assays[["counts"]])
txps.missing <- !assay.nms %in% names(txps)
if (markDuplicateTxps | (cleanDuplicateTxps & sum(txps.missing) >
0)) {
dup.list <- makeDuplicateTxpsList(txomeInfo)
}
if (cleanDuplicateTxps & sum(txps.missing) > 0) {
missing.txps <- assay.nms[txps.missing]
dup.table <- makeDuplicateTxpsTable(missing.txps, dup.list,
names(txps))
if (is.null(dup.table)) {
message("no duplicated transcripts to clean")
}
else {
message(paste("cleaning", nrow(dup.table), "duplicate transcript names"))
m <- match(dup.table$dups.to.fix, assay.nms)
stopifnot(all(!is.na(m)))
for (nm in names(assays)) {
assay.nms[m] <- dup.table$alts
rownames(assays[[nm]]) <- assay.nms
}
}
}
testTxp <- rownames(assays[[1]])[1]
if (grepl("ENST|ENSMUST", testTxp) & grepl("\\|", testTxp)) {
for (i in names(assays)) {
rownames(assays[[i]]) <- sub("\\|.*", "", rownames(assays[[i]]))
}
}
print(head(txps))
print(head(names(txps)))
assays <- checkAssays2Txps(assays, txps)
txps <- txps[rownames(assays[["counts"]])]
if (markDuplicateTxps) {
assay.nms <- rownames(assays[["counts"]])
dups.in.rownms <- unlist(dup.list) %in% assay.nms
dups.in.rownms <- LogicalList(split(dups.in.rownms, rep(seq_along(dup.list),
lengths(dup.list))))
names(dups.in.rownms) <- NULL
num.dups.in.rownms <- sapply(dups.in.rownms, sum)
just.one <- num.dups.in.rownms == 1
if (!all(just.one)) {
dup.list <- dup.list[just.one]
dups.in.rownms <- dups.in.rownms[just.one]
}
duplicates <- dup.list[!dups.in.rownms]
duplicates.id <- as.character(dup.list[dups.in.rownms])
mcols(txps)$hasDuplicate <- FALSE
mcols(txps)$duplicates <- CharacterList(as.list(rep("",
length(txps))))
if (length(duplicates) > 0) {
message(paste(length(duplicates), "duplicate set founds"))
mcols(txps)$hasDuplicate[names(txps) %in% duplicates.id] <- TRUE
duplicates <- duplicates[duplicates.id %in% names(txps)]
duplicates.id <- duplicates.id[duplicates.id %in%
names(txps)]
mcols(txps)$duplicates[match(duplicates.id, names(txps))] <- duplicates
}
else {
message("no duplicates found")
}
}
missingSeqinfo <- any(is.na(seqlengths(txps)))
if (txomeInfo$source == "GENCODE" & !skipSeqinfo & missingSeqinfo) {
message("fetching genome info for GENCODE")
ucsc.genome <- genome2UCSC(txomeInfo$genome)
try(seqinfo(txps) <- Seqinfo(genome = ucsc.genome)[seqlevels(txps)])
}
else if (txomeInfo$source == "RefSeq" & !skipSeqinfo & missingSeqinfo) {
message("fetching genome info for RefSeq")
refseq.genome <- gtf2RefSeq(txomeInfo$gtf, txomeInfo$genome)
stopifnot(all(seqlevels(txps) %in% seqnames(refseq.genome)))
try(seqinfo(txps) <- refseq.genome[seqlevels(txps)])
}
txdbInfo <- metadata(txdb)$value
names(txdbInfo) <- metadata(txdb)$name
metadata$txomeInfo <- txomeInfo
metadata$txdbInfo <- txdbInfo
se <- SummarizedExperiment(assays = assays, rowRanges = txps,
colData = coldata, metadata = metadata)
se
}
se <- txim2(coldata,  useHub = FALSE, ignoreTxVersion = TRUE) #, skipMeta=TRUE)
