"""===================
pipeline_ensembl.py
===================

Overview
--------

This pipeline post-processes Ensembl annotation files to prepare a set of annotation files suitable for the analysis of RNA-sequencing data. It performs the following tasks:

#. Makes a version of primary assembly FASTA file in which the Y chromosome PAR regions are hard masked.
#. Makes a coding and non-coding transcript FASTA file that only contains records for PRI contigs and that excludes transcript sequences from the Y chromosome PAR region
#. Makes a new version of the ensembl GTF file that only contains records for PRI contigs and that excludes gene models from the Y chromosome PAR region


Configuration
-------------

The pipeline requires a configured :file:`pipeline_ensembl.yml` file.

A default configuration file can be generated by executing: ::

   txseq ensembl config

Input files
-----------

The pipeline requires the following inputs

#. The Ensembl primary assembly FASTA sequences
#. The Ensembl geneset in GTF format
#. The Ensembl cDNA FASTA sequences
#. The Ensembl ncRNA FASTA sequences 
#. PAR region definitions in BED format

The location of these three files must be specified in the 'pipeline_ensembl.yml' file.

Output files
------------

The pipeline creates an "api" folder with the following files for use by downstream pipelines:

#. api/primary.assembly.fa.gz
#. api/transcripts.fa.gz
#. api/geneset.gtf.gz

Code
====

"""
from ruffus import *
import sys

# import CGAT-core pipeline functions
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools


# Import txseq utility functions
import txseq.tasks as T

# ----------------------- < pipeline configuration > ------------------------ #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))

# set the location of the code directory
PARAMS["txseq_code_dir"] = Path(__file__).parents[1]

# ---------------------- < specific pipeline tasks > ------------------------ #


@files(PARAMS["par"],
       "Y.PAR.bed")
def extractYPAR(infile, outfile):
    '''
    Make a BED file containing the coordinates of the PAR regions
    on the Y chromosome
    '''
    
    statement = '''grep Y %(infile)s > %(outfile)s
                ''' % locals()
                
    P.run(statement)
                

@transform(PARAMS["primary_assembly"],
           suffix(".gz"),
           add_inputs(extractYPAR),
           "primary.assembly.fa.gz.sentinel")
def hardMaskYPAR(infiles, sentinel):
    '''
       Hard mask the chromosome Y PAR region 
    '''
    
    assembly, y_par_bed = infiles
    
    t = T.setup(assembly, sentinel, PARAMS)
    
    statement = '''bedtools maskfasta
                   -fi %(assembly)s
                   -fo %(out_file)s
                   -bed %(y_par_bed)s
                    &> %(log_file)s 
                ''' % dict(PARAMS, **t.var, **locals())
                
    P.run(statement, **t.resources)
    IOTools.touch_file(sentinel)    


@files(PARAMS["primary_assembly"],
       "primary.assembly.contigs.sentinel"
def contigs(infile, sentinel):
    '''
    Get a list of the contigs present in the primary assembly
    '''
    
    t = T.setup(assembly, sentinel, PARAMS)
    
    statement = '''zgrep \> %(infile)s
                   | sed 's/>//g'
                   > %(out_file)s
                ''' % dict(**t.var, **locals())

    P.run(statement, **t.resources)
    IOTools.touch_file(sentinel)  

@files([PARAMS["cdna"], PARAMS["ncrna"]],
       "transcripts.fa.gz.sentinel")
def transcripts(infiles, sentinel):
    '''
    Build the full set of cDNA and ncRNA Ensembl transcripts
    '''
    
    cdna, ncrna = infiles

    t = T.setup(cdna, sentinel, PARAMS)
        
    mktemp_template = "ctmp.transcripts.XXXXXXXXXX"
    
    statement='''python %(txseq_code_dir)s/python/sanitise.transcripts.py
                 --infiles=%(cdna)s,%(rna)s
                 --contigs=%(contigs)s
                 --ypar=%(ypar)s
                 --outfile=%(out_file)s
              '''% dict(**t.var, **locals())

    P.run(statement, **t.resources)
    IOTools.touch_file(sentinel)


@files(PARAMS["geneset"],
       "geneset.gtf.gz.sentinel")
def gtf(infile, outfile):
    '''
    Sanitise the geneset to (a) include records from only contigs of interest and
    (b) to exclude records falling in the Y chromosome PAR region
    '''
    
    
                 



    
    

# --------------------- < generic pipeline tasks > -------------------------- #

@follows(index)
def full():
    '''Target to run the full pipeline'''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))