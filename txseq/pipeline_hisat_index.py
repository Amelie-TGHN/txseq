"""=======================
pipeline_hisat_index.py
=======================

Overview
--------

This pipeline makes a hisat2 HGFM index with transcripts.

The pipeline is written using the `CGAT-core workflow management system <https://cgat-core.readthedocs.io/en/latest/>`_ .


Configuration
-------------

The pipeline requires a configured :file:`pipeline_hisat_index.yml` file.

A default configuration file can be generated by executing: ::

   txseq hisat_index config


Input files
-----------

For building the  index the pipeline requires:

#. A gzip compressed FASTA file containing the genome primary assembly sequences.
#. A gzip compressed GTF file containing the transcript information.

The location of these files must be specified in the 'pipeline_index.yml' file.

Requirements
------------

The following software is required:

#. Hisat2


Output files
------------

The pipeline generates a hisat2 HGFM index in the current folder.

Code
====

"""
from ruffus import *
import sys

# import CGAT-core pipeline functions
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools

# Import txseq utility functions
import txseq.tasks as T

# ----------------------- < pipeline configuration > ------------------------ #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))


# ---------------------- < specific pipeline tasks > ------------------------ #

@files(PARAMS["geneset"],
       "genome.ss.sentinel")
def spliceSites(infile, sentinel):
    '''
    Extract the splice sites
    '''

    t = T.setup(infile, sentinel, PARAMS,
                memory="32G",
                cpu=1,
                make_outdir=False)

    statement = '''hisat2_extract_splice_sites.py 
                   <(zcat %(infile)s) 
                   > %(out_file)s
                ''' % dict(PARAMS, **t.var, **locals())

    P.run(statement, **t.resources)
    IOTools.touch_file(sentinel)


@files(PARAMS["geneset"],
       "genome.exon.sentinel")
def exons(infile, sentinel):
    '''
    Extract the exons.
    '''

    t = T.setup(infile, sentinel, PARAMS,
                memory="32G",
                cpu=1,
                make_outdir=False)

    statement = '''hisat2_extract_exons.py 
                   <(zcat %(infile)s) 
                   > %(out_file)s
                ''' % dict(PARAMS, **t.var, **locals())

    P.run(statement, **t.resources)
    IOTools.touch_file(sentinel)


@transform(spliceSites,
           regex(r"genome.ss.sentinel"),
           add_inputs(exons),
           "genome_tran.sentinel")
def transcriptomeIndex(infiles, sentinel):
    '''
    Generate a HGFM index with transcripts. 
    '''
    
    t = T.setup(infiles[0], sentinel, PARAMS,
                memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_threads"],
                make_outdir=False)
    
    ss, exons  = [ x.replace(".sentinel", "") for x in infiles]
    
    options = ''
    if not PARAMS['options'] is None:
        options = PARAMS['options']
    
    # It is necessary to unzip the genome fasta file.
    
    statement = '''zcat %(primary_assembly)s > genome.fa;
                   hisat2-build 
                   -p %(resources_threads)s 
                   --exon %(exons)s
                   --ss %(ss)s
                   genome.fa
                   genome_tran;
                   rm genome.fa;
                ''' % dict(PARAMS, **t.var, **locals())
                
    P.run(statement, **t.resources)
    IOTools.touch_file(sentinel)    


# --------------------- < generic pipeline tasks > -------------------------- #

@follows(transcriptomeIndex)
def full():
    '''Target to run the full pipeline'''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))