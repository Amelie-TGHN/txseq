"""===========================
Pipeline arcasHLA
===========================

:Author: Liying Jin
:Release: $Id$
:Date: 21/07/2023
:Tags: Python


Overview
========

This pipeline designed to perform arcasHLA on bulk RNA-seq data, enabling high-resolution genotyping and quantification of HLA class I and class II gene expression. Single and paired end-data is supported.

This pipeline performs the follow tasks:

(1) Extracts chromosome 6 reads and related HLA sequences from sorted BAM files. If the BAM file is not indexed, this tool will run samtools index before extracting reads.

(2) Predicting the most likely genotype. 

(3) Build customized references from previous outputs.

(4) Quantifies HLA class I and class II gene expression based on customized references.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.
CGATReport report requires a :file:`conf.py` and optionally a
file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_arcashla.py config


Input files
-----------

* BAMs

- location of directory containing the BAM files should be provided in pipeline_arcashla.yml


Requirements
------------

On top of the default CGAT setup, the pipeline requires the following
software to be in the path:

.. Add any additional external requirements such as 3rd party software
   or R modules below:

Requirements:

* arcasHLA v0.5.0 (which requires Git Large File Storage and coreutils)
* Samtools v1.19
* bedtools v2.27.1
* pigz v2.3.1
* Kallisto v0.44.0
* Python 3.6

* Biopython v1.77 (or lower)
    * On the BMRC, you can load the required version using the command: "module load Biopython/1.76-foss-2020a-Python-3.8.2"
* NumPy
* SciPy
* Pandas

Pipeline output
===============

The file named 'sample_name.partial_genotype.json' contains the genotype results. Meanwhile, you can find the quantification results within the 'quant' directory.

Code
====

"""
from ruffus import *

import sys
import shutil
import os
import re
from pathlib import Path
import glob
import sqlite3

import pandas as pd
import numpy as np

from cgatcore import experiment as E
from cgatcore import pipeline as P
from cgatcore import database as DB
import cgatcore.iotools as IOTools

# import local pipeline utility functions
# import txseq.tasks as T
import tasks as T

# ----------------------- < pipeline configuration > ------------------------ #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))

# ---------------------- < Read parameters > ------------------------ #

# Determine sample files path
bam_path = PARAMS["bam_path"]
bam_files = glob.glob(os.path.join(bam_path,'*.bam'))

if str(PARAMS["single"]).lower() in ("1", "true", "yes"):       
    single = True
else:
    single = False

# ########################################################################### #
# ############################ Extract Reads  ############################### #
# ########################################################################### #

@mkdir("arcasHLA.dir")
@transform(bam_files, regex(r".*/(.*).bam"), r"arcasHLA.dir/\1/\1.extract.sentinel")
def estractReads(infile, outfile):
    '''
    Extract chr6 reads and related HLA sequences from sorted BAM files.
    '''
    sample_name = os.path.basename(infile)[:-len(".bam")]
    outpath = os.path.dirname(outfile)
    
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_threads"])
    
    # Read parameters
    if single:
        single_option = "--single"
    else:
        single_option = ""
        
    extract_option = PARAMS["extract_option"]

    statement = '''arcasHLA extract
                %(single_option)s
                %(extract_option)s
                -o %(outpath)s
                -t %(resources_threads)s
                %(infile)s
                &> %(log_file)s;
                ''' % dict(PARAMS, **t.var, **locals())
     
    P.run(statement, **t.resources)
    IOTools.touch_file(outfile)



# ########################################################################### #
# ############################   Genotype  ################################## #
# ########################################################################### #

@follows(estractReads)
@transform(estractReads,regex(r".*/(.*).extract.sentinel"),r"arcasHLA.dir/\1/\1.genotype.sentinel")
def genotype(infile, outfile):
    '''
    Perform Genotyping.
    '''
    
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_threads"])

    fastq_path = os.path.dirname(infile)
    sample_name = os.path.basename(infile)[:-len(".extract.sentinel")]
    outpath = os.path.dirname(outfile)

    if single:
        fastq_file = os.path.join(fastq_path, sample_name+".extracted.fq.gz")
        statement = '''arcasHLA genotype
                    --single 
                    -o %(outpath)s
                    -t %(resources_threads)s
                    %(fastq_file)s
                    &> %(log_file)s;
                    '''  % dict(PARAMS, **t.var, **locals())
    else:
        fastq_file_1 = os.path.join(fastq_path, sample_name+".extracted.1.fq.gz")
        fastq_file_2 = os.path.join(fastq_path, sample_name+".extracted.2.fq.gz")
        statement = '''arcasHLA genotype
                    -o %(outpath)s
                    -t %(resources_threads)s
                    %(fastq_file_1)s
                    %(fastq_file_2)s
                    &> %(log_file)s;
                    ''' % dict(PARAMS, **t.var, **locals())
    
    P.run(statement, **t.resources)
    
    IOTools.touch_file(outfile)

# ########################################################################### #
# ############################ Build Reference ############################## #
# ########################################################################### #

@follows(genotype)
@transform(genotype,regex(r".*/(.*).genotype.sentinel"),r"arcasHLA.dir/\1/\1.buildref.sentinel")
def buildReference(infile, outfile):
    '''
    Build Customized References
    '''
    
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_threads"])
    
    json_path = os.path.dirname(infile)
    sample_name = os.path.basename(infile)[:-len(".genotype.sentinel")]
    outpath = os.path.dirname(outfile)
    json_file = os.path.join(json_path, sample_name+".genotype.json")

    statement = '''arcasHLA customize
                -G %(json_file)s
                -o %(outpath)s
                -t %(resources_threads)s
                --transcriptome chr6
                &> %(log_file)s;
                ''' % dict(PARAMS, **t.var, **locals())
    
    P.run(statement, **t.resources)
    IOTools.touch_file(outfile)

# ########################################################################### #
# ############################ Quantification ############################### #
# ########################################################################### #

@follows(buildReference)
@transform(buildReference,regex(r".*/(.*).buildref.sentinel"),r"arcasHLA.dir/\1/\1.quantification.sentinel")
def quantification(infile, outfile):
    '''
    Perform Quantification
    '''
    sample_name = os.path.basename(infile)[:-len(".buildref.sentinel")]
    sample_path = os.path.dirname(infile)
    ref_file = sample_path + '/' + sample_name
    outpath = os.path.join(os.path.dirname(outfile),'quant')
    
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_threads"])
        
    if single:
        fastq_file = os.path.join(sample_path, sample_name+".extracted.fq.gz")
        statement = '''arcasHLA quant
                    --single 
                    --ref %(ref_file)s
                    -o %(outpath)s
                    -t %(resources_threads)s
                    %(fastq_file)s
                    &> %(log_file)s;
                    ''' % dict(PARAMS, **t.var, **locals())
    else:
        fastq_file_1 = os.path.join(sample_path, sample_name+".extracted.1.fq.gz")
        fastq_file_2 = os.path.join(sample_path, sample_name+".extracted.2.fq.gz")
        statement = '''arcasHLA quant
                    --ref %(ref_file)s
                    -t %(resources_threads)s
                    -o %(outpath)s
                    %(fastq_file_1)s
                    %(fastq_file_2)s
                    &> %(log_file)s;
                    ''' % dict(PARAMS, **t.var, **locals())
    
    P.run(statement, **t.resources)
    IOTools.touch_file(outfile)

# --------------------- < generic pipeline tasks > -------------------------- #


@follows(quantification)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

    
if __name__ == "__main__":
    sys.exit(P.main(sys.argv))