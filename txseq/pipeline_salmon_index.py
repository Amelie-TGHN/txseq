"""===============
Pipeline Salmon index
=====================

Overview
========

This pipeline makes a Salmon SAF genome index. This type of index uses the full genome as a decoy: according to the Salmon authors this type of index 'does the best job in avoiding spurious alignments to annotated transcripts'.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline_salmon_index.yml` file.

A default configuration file can be generated by executing:

   python <srcdir>/pipeline_salmon_index.py config


Input files
-----------


For building the SAF genome index the pipeline requires:

#. A gzip compressed fasta file containing the transcript sequences.
#. A gzip compressed fasta file containing the genome primary assembly sequences.

The location of these three files must be specified in the 'pipeline_salmon.yml' file.


Output files
------------

The pipeline generates a salmon index called "salmon_index" in the current folder.


Glossary
========

.. glossary::


Code
====

"""
from ruffus import *

import sys
import shutil
import os

from cgatcore import experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools


# import local pipeline utility functions
import txseq.tasks as T

# ----------------------- < pipeline configuration > ------------------------ #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))


# ---------------------- < specific pipeline tasks > ------------------------ #

@files(None,
       "index.sentinel")
def index(infile, outfile):
    '''
    Generate a SAF genome index. 
    '''
    
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_threads"],
                make_outdir=False)
    
    options = ''
    if not PARAMS['options'] is None:
        options = PARAMS['options']
    
    source = "--gencode" if PARAMS["fasta_source"] == "gencode" else ""
    
    statement = '''grep "^>" <(gunzip -c %(genome_fasta)s) 
                   | cut -d " " -f 1 
                   > decoys.txt;
                   sed -i.bak -e 's/>//g' decoys.txt;
                   cat %(transcript_fasta)s %(genome_fasta)s 
                   > gentrome.fa.gz;
                   salmon index -t gentrome.fa.gz 
                                -d decoys.txt 
                                -k %(kmerLen)s
                                -p %(resources_threads)s 
                                -i salmon_index
                                %(options)s
                                %(source)s
                    &> %(log_file)s 
                ''' % dict(PARAMS, **t.var, **locals())
                
    P.run(statement, **t.resources)
    IOTools.touch_file(outfile)    


# --------------------- < generic pipeline tasks > -------------------------- #

@follows(index)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))